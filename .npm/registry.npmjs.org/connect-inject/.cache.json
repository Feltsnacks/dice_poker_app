{"_id":"connect-inject","_rev":"8-6d5ca963ca023630ea1160bb529cc4a2","name":"connect-inject","description":"connect middleware for adding any script to the response","dist-tags":{"latest":"0.3.2"},"versions":{"0.3.0":{"name":"connect-inject","description":"connect middleware for adding any script to the response","version":"0.3.0","author":{"name":"Daniel Duches","email":"iridiumweb@gmail.com"},"email":"iridiumweb@gmail.com","dependencies":{},"devDependencies":{"express":"~3.2.2"},"keywords":["connect","inject"],"repository":{"type":"git","url":"git://github.com/danielhq/connect-inject.git"},"main":"index","engines":{"node":"*"},"readme":"connect-inject\n==================\nconnect middleware for adding any script to the response, this is a forked version of connect-livereload.\n\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to  the author.\n\nFor further documentation refer to the author's repo [connect-livereload](https://github.com/intesso/connect-livereload).\n\ninstall\n=======\n```bash\nnpm install connect-inject --save-dev\n```\n```git\ngit clone https://github.com/danielhq/connect-inject.git\n```\nuse\n===\n\nthis middleware can be used to inject any sort of content into the webpage e.g. [Livereload, Weinre etc]\n\n## connect/express example\n```javascript\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\"\n  }));\n```\n\n\n## options\nOptions are not mandatory: `app.use(require('connect-inject')());`\nThe Options have to be provided when the middleware is loaded:\n\ne.g.:\n```\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\",\n    ignore: ['.js', '.svg']\n  }));\n\n```\n\nThese are the available options with the following defaults:\n\n```javascript\n  // these files will be ignored\n  ignore: ['.js', '.css', '.svg', '.ico', '.woff', '.png', '.jpg', '.jpeg'],\n\n  // this function is used to determine if the content of `res.write` or `res.end` is html.\n  html: function (str) {\n    return /<[:_-\\w\\s\\!\\/\\=\\\"\\']+>/i.test(str);\n  },\n\n  // rules are provided to find the place where the snippet should be inserted.\n  // the main problem is that on the server side it can be tricky to determine if a string will be valid html on the client.\n  // the function `fn` of the first `match` is executed like this `body.replace(rule.match, rule.fn);`\n  // the function `fn` has got the arguments `fn(w, s)` where `w` is the matches string and `s` is the snippet.\n  rules: [{\n    match: /<\\/body>/,\n    fn: prepend\n  }, {\n    match: /<\\/html>/,\n    fn: prepend\n  }, {\n    match: /<\\!DOCTYPE.+>/,\n    fn: append\n  }],\n\n\n  // snippet taks a string argument which can be anything you want, and will be appended (by default) before </body> tag\n  snippet: \"<script>alert('hello world');</script>\"\n```\n\n\n## grunt example\n\nThe following example is from an actual Gruntfile that uses [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\n\n```javascript\nconnect: {\n  options: {\n    port: 3000,\n    hostname: 'localhost'\n  },\n  dev: {\n    options: {\n      middleware: function (connect) {\n        return [\n          require('connect-inject')({ snippet: \"<script>alert('hello world');</script>\"}),\n          mountFolder(connect, '.tmp'),\n          mountFolder(connect, 'app')\n        ];\n      }\n    }\n  }\n}\n```\nFor use as middleware in grunt simply add the following to the **top** of your array of middleware.\n\n```javascript\n  require('connect-inject')(),\n```\nYou can pass in options to this call if you do not want the defaults.\n\n`dev` is simply the name of the server being used with the task `grunt connect:dev`. The other items in the `middleware` array are all functions that either are of the form `function (req, res, next)` like `checkForDownload` or return that like `mountFolder(connect, 'something')`.\n\n\ncredits\n=======\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to the author.\n\n\nlicense\n=======\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/danielhq/connect-inject/issues"},"_id":"connect-inject@0.3.0","dist":{"shasum":"e4a80864ff7f208aeabfd55e787efc81f5b6ff2d","tarball":"http://registry.npmjs.org/connect-inject/-/connect-inject-0.3.0.tgz"},"_from":".\\","_npmVersion":"1.3.2","_npmUser":{"name":"danielhq","email":"iridiumweb@gmail.com"},"maintainers":[{"name":"danielhq","email":"iridiumweb@gmail.com"}],"directories":{}},"0.3.1":{"name":"connect-inject","description":"connect middleware for adding any script to the response","version":"0.3.1","author":{"name":"Daniel Duches","email":"iridiumweb@gmail.com"},"email":"iridiumweb@gmail.com","dependencies":{},"devDependencies":{"express":"~3.2.2"},"keywords":["connect","inject"],"repository":{"type":"git","url":"git://github.com/danielhq/connect-inject.git"},"main":"index","engines":{"node":"*"},"readme":"connect-inject\n==================\nconnect middleware for adding any script to the response, this is a forked version of connect-livereload.\n\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to  the author.\n\nFor further documentation refer to the author's repo [connect-livereload](https://github.com/intesso/connect-livereload).\n\ninstall\n=======\n```bash\nnpm install connect-inject --save-dev\n```\n```git\ngit clone https://github.com/danielhq/connect-inject.git\n```\nuse\n===\n\nthis middleware can be used to inject any sort of content into the webpage e.g. [Livereload, Weinre etc]\n\n## connect/express example\n```javascript\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\"\n  }));\n```\n\n\n## options\nOptions are not mandatory: `app.use(require('connect-inject')());`\nThe Options have to be provided when the middleware is loaded:\n\ne.g.:\n```\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\",\n    ignore: ['.js', '.svg']\n  }));\n\n```\n\nThese are the available options with the following defaults:\n\n```javascript\n  // these files will be ignored\n  ignore: ['.js', '.css', '.svg', '.ico', '.woff', '.png', '.jpg', '.jpeg'],\n\n  // this function is used to determine if the content of `res.write` or `res.end` is html.\n  html: function (str) {\n    return /<[:_-\\w\\s\\!\\/\\=\\\"\\']+>/i.test(str);\n  },\n\n  // rules are provided to find the place where the snippet should be inserted.\n  // the main problem is that on the server side it can be tricky to determine if a string will be valid html on the client.\n  // the function `fn` of the first `match` is executed like this `body.replace(rule.match, rule.fn);`\n  // the function `fn` has got the arguments `fn(w, s)` where `w` is the matches string and `s` is the snippet.\n  rules: [{\n    match: /<\\/body>/,\n    fn: prepend\n  }, {\n    match: /<\\/html>/,\n    fn: prepend\n  }, {\n    match: /<\\!DOCTYPE.+>/,\n    fn: append\n  }],\n\n\n  // snippet taks a string argument which can be anything you want, and will be appended (by default) before </body> tag\n  snippet: \"<script>alert('hello world');</script>\"\n```\n\n\n## grunt example\n\nThe following example is from an actual Gruntfile that uses [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\n\n```javascript\nconnect: {\n  options: {\n    port: 3000,\n    hostname: 'localhost'\n  },\n  dev: {\n    options: {\n      middleware: function (connect) {\n        return [\n          require('connect-inject')({ snippet: \"<script>alert('hello world');</script>\"}),\n          mountFolder(connect, '.tmp'),\n          mountFolder(connect, 'app')\n        ];\n      }\n    }\n  }\n}\n```\nFor use as middleware in grunt simply add the following to the **top** of your array of middleware.\n\n```javascript\n  require('connect-inject')(),\n```\nYou can pass in options to this call if you do not want the defaults.\n\n`dev` is simply the name of the server being used with the task `grunt connect:dev`. The other items in the `middleware` array are all functions that either are of the form `function (req, res, next)` like `checkForDownload` or return that like `mountFolder(connect, 'something')`.\n\n\ncredits\n=======\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to the author.\n\n\nlicense\n=======\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/danielhq/connect-inject/issues"},"_id":"connect-inject@0.3.1","dist":{"shasum":"7799f9bc625210db96bf264ddd9e9e3f73cc16ee","tarball":"http://registry.npmjs.org/connect-inject/-/connect-inject-0.3.1.tgz"},"_from":".\\","_npmVersion":"1.3.2","_npmUser":{"name":"danielhq","email":"iridiumweb@gmail.com"},"maintainers":[{"name":"danielhq","email":"iridiumweb@gmail.com"}],"directories":{}},"0.3.2":{"name":"connect-inject","description":"connect middleware for adding any script to the response","version":"0.3.2","author":{"name":"Daniel Duches","email":"iridiumweb@gmail.com"},"email":"iridiumweb@gmail.com","dependencies":{},"devDependencies":{"express":"~3.2.2"},"keywords":["connect","inject"],"repository":{"type":"git","url":"git://github.com/danielhq/connect-inject.git"},"main":"index","engines":{"node":"*"},"readme":"connect-inject\n==================\nconnect middleware for adding any script to the response, this is a forked version of connect-livereload.\n\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to  the author.\n\nFor further documentation refer to the author's repo [connect-livereload](https://github.com/intesso/connect-livereload).\n\ninstall\n=======\n```bash\nnpm install connect-inject --save-dev\n```\n```git\ngit clone https://github.com/danielhq/connect-inject.git\n```\nuse\n===\n\nthis middleware can be used to inject any sort of content into the webpage e.g. [Livereload, Weinre etc]\n```\n  snippet: string | Array\n```\nsnippet now accepts either string or an array which will be inserted at the bottom of the page by default.\n\n## connect/express example\n```javascript\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\"\n  }));\n```\n\n\n## options\nOptions are not mandatory: `app.use(require('connect-inject')());`\nThe Options have to be provided when the middleware is loaded:\n\ne.g.:\n```\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\",\n    ignore: ['.js', '.svg']\n  }));\n\n```\n\nThese are the available options with the following defaults:\n\n```javascript\n  // these files will be ignored\n  ignore: ['.js', '.css', '.svg', '.ico', '.woff', '.png', '.jpg', '.jpeg'],\n\n  // this function is used to determine if the content of `res.write` or `res.end` is html.\n  html: function (str) {\n    return /<[:_-\\w\\s\\!\\/\\=\\\"\\']+>/i.test(str);\n  },\n\n  // rules are provided to find the place where the snippet should be inserted.\n  // the main problem is that on the server side it can be tricky to determine if a string will be valid html on the client.\n  // the function `fn` of the first `match` is executed like this `body.replace(rule.match, rule.fn);`\n  // the function `fn` has got the arguments `fn(w, s)` where `w` is the matches string and `s` is the snippet.\n  rules: [{\n    match: /<\\/body>/,\n    fn: prepend\n  }, {\n    match: /<\\/html>/,\n    fn: prepend\n  }, {\n    match: /<\\!DOCTYPE.+>/,\n    fn: append\n  }],\n\n\n  // snippet taks a string argument which can be anything you want, and will be appended (by default) before </body> tag\n  snippet: \"<script>alert('hello world');</script>\"\n```\n\n\n## grunt example\n\nThe following example is from an actual Gruntfile that uses [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\n\n```javascript\nconnect: {\n  options: {\n    port: 3000,\n    hostname: 'localhost'\n  },\n  dev: {\n    options: {\n      middleware: function (connect) {\n        return [\n          require('connect-inject')({ snippet: \"<script>alert('hello world');</script>\"}),\n          mountFolder(connect, '.tmp'),\n          mountFolder(connect, 'app')\n        ];\n      }\n    }\n  }\n}\n```\nFor use as middleware in grunt simply add the following to the **top** of your array of middleware.\n\n```javascript\n  require('connect-inject')(),\n```\nYou can pass in options to this call if you do not want the defaults.\n\n`dev` is simply the name of the server being used with the task `grunt connect:dev`. The other items in the `middleware` array are all functions that either are of the form `function (req, res, next)` like `checkForDownload` or return that like `mountFolder(connect, 'something')`.\n\n\ncredits\n=======\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to the author.\n\n\nlicense\n=======\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/danielhq/connect-inject/issues"},"_id":"connect-inject@0.3.2","dist":{"shasum":"d96b516a5b6bb24c2191e622b5e82cdd62844ba3","tarball":"http://registry.npmjs.org/connect-inject/-/connect-inject-0.3.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"danielhq","email":"iridiumweb@gmail.com"},"maintainers":[{"name":"danielhq","email":"iridiumweb@gmail.com"}],"directories":{}}},"readme":"connect-inject\n==================\nconnect middleware for adding any script to the response, this is a forked version of connect-livereload.\n\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to  the author.\n\nFor further documentation refer to the author's repo [connect-livereload](https://github.com/intesso/connect-livereload).\n\ninstall\n=======\n```bash\nnpm install connect-inject --save-dev\n```\n```git\ngit clone https://github.com/danielhq/connect-inject.git\n```\nuse\n===\n\nthis middleware can be used to inject any sort of content into the webpage e.g. [Livereload, Weinre etc]\n\n## connect/express example\n```javascript\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\"\n  }));\n```\n\n\n## options\nOptions are not mandatory: `app.use(require('connect-inject')());`\nThe Options have to be provided when the middleware is loaded:\n\ne.g.:\n```\n  app.use(require('connect-inject')({\n    snippet: \"<script>alert('hello world');</script>\",\n    ignore: ['.js', '.svg']\n  }));\n\n```\n\nThese are the available options with the following defaults:\n\n```javascript\n  // these files will be ignored\n  ignore: ['.js', '.css', '.svg', '.ico', '.woff', '.png', '.jpg', '.jpeg'],\n\n  // this function is used to determine if the content of `res.write` or `res.end` is html.\n  html: function (str) {\n    return /<[:_-\\w\\s\\!\\/\\=\\\"\\']+>/i.test(str);\n  },\n\n  // rules are provided to find the place where the snippet should be inserted.\n  // the main problem is that on the server side it can be tricky to determine if a string will be valid html on the client.\n  // the function `fn` of the first `match` is executed like this `body.replace(rule.match, rule.fn);`\n  // the function `fn` has got the arguments `fn(w, s)` where `w` is the matches string and `s` is the snippet.\n  rules: [{\n    match: /<\\/body>/,\n    fn: prepend\n  }, {\n    match: /<\\/html>/,\n    fn: prepend\n  }, {\n    match: /<\\!DOCTYPE.+>/,\n    fn: append\n  }],\n\n\n  // snippet taks a string argument which can be anything you want, and will be appended (by default) before </body> tag\n  snippet: \"<script>alert('hello world');</script>\"\n```\n\n\n## grunt example\n\nThe following example is from an actual Gruntfile that uses [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\n\n```javascript\nconnect: {\n  options: {\n    port: 3000,\n    hostname: 'localhost'\n  },\n  dev: {\n    options: {\n      middleware: function (connect) {\n        return [\n          require('connect-inject')({ snippet: \"<script>alert('hello world');</script>\"}),\n          mountFolder(connect, '.tmp'),\n          mountFolder(connect, 'app')\n        ];\n      }\n    }\n  }\n}\n```\nFor use as middleware in grunt simply add the following to the **top** of your array of middleware.\n\n```javascript\n  require('connect-inject')(),\n```\nYou can pass in options to this call if you do not want the defaults.\n\n`dev` is simply the name of the server being used with the task `grunt connect:dev`. The other items in the `middleware` array are all functions that either are of the form `function (req, res, next)` like `checkForDownload` or return that like `mountFolder(connect, 'something')`.\n\n\ncredits\n=======\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to the author.\n\n\nlicense\n=======\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\n","maintainers":[{"name":"danielhq","email":"iridiumweb@gmail.com"}],"time":{"modified":"2013-10-24T15:14:15.633Z","created":"2013-10-21T16:37:29.627Z","0.3.0":"2013-10-21T16:37:38.301Z","0.3.1":"2013-10-21T16:57:30.383Z","0.3.2":"2013-10-24T15:14:15.633Z"},"author":{"name":"Daniel Duches","email":"iridiumweb@gmail.com"},"repository":{"type":"git","url":"git://github.com/danielhq/connect-inject.git"},"users":{"csbun":true},"_attachments":{},"_etag":"\"I8CNMED631LOTL7DM5S8HGZT\""}